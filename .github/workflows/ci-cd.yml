name: Weather API CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME: weather-api
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}

jobs:
  # Test the application
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml || echo "No tests found"
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics

  # Build and push Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Container Registry Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Docker image
      run: |
        # Build image with git commit hash
        IMAGE_TAG="${GITHUB_SHA::8}"
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAGS="${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG},${REGISTRY}/${IMAGE_NAME}:latest"
        else
          TAGS="${REGISTRY}/${IMAGE_NAME}:dev-${IMAGE_TAG}"
        fi
        
        docker build -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .
        
        # Push all tags
        for tag in $(echo $TAGS | tr ',' ' '); do
          docker tag ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} $tag
          docker push $tag
        done

  # Deploy to AKS (only on main branch)
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }}
          
    - name: Deploy to AKS
      run: |
        # Update image tag in deployment
        IMAGE_TAG="${GITHUB_SHA::8}"
        sed -i "s|image: .*|image: ${{ secrets.ACR_LOGIN_SERVER }}/${IMAGE_NAME}:${IMAGE_TAG}|" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/weather-api --timeout=300s
        
        # Verify deployment
        kubectl get pods -l app=weather-api
        kubectl get service weather-api-service

  # Deploy to development (on dev branch)
  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Dev Environment
      run: |
        # This could deploy to a separate dev cluster or namespace
        echo "Deploying to development environment..."
        # Add dev-specific deployment logic here
